import os
import xml.etree.ElementTree as ET

# Configuration
INPUT_DIR = "/assets//svg/"  # Directory containing SVG files
OUTPUT_DIR = "/assets/icons/"  # Directory to save generated React components
ICON_COMPONENT_TEMPLATE = """import React from 'react';
import Icon from '../components/Icon';

const {icon_name} = ({ color, size }) => (
  <Icon color={{color}} size={{size}}>
    {paths}
  </Icon>
);

export default {icon_name};
"""

def kebab_to_pascal(kebab_str):
    """Convert kebab-case to PascalCase."""
    return ''.join(word.title() for word in kebab_str.split('-'))

def extract_paths_from_svg(svg_file):
    """Extract <path> elements from an SVG file."""
    tree = ET.parse(svg_file)
    root = tree.getroot()
    namespace = "{http://www.w3.org/2000/svg}"
    paths = []

    for path in root.findall(f".//{namespace}path"):
        paths.append(f'    <Path d="{path.attrib["d"]}" />')

    return "\n".join(paths)

def generate_icon_component(icon_name, paths):
    """Generate a React Native icon component."""
    return ICON_COMPONENT_TEMPLATE.format(
        icon_name=icon_name,
        paths=paths
    )

def main():
    # Loop through all SVG files in the input directory
    for svg_file in os.listdir(INPUT_DIR):
        if svg_file.endswith(".svg"):
            # Extract icon name from the file name
            base_name = os.path.splitext(svg_file)[0]  # Remove .svg extension
            icon_name = kebab_to_pascal(base_name) + "Icon"  # Convert to PascalCase and add "Icon"

            # Extract paths from the SVG file
            svg_path = os.path.join(INPUT_DIR, svg_file)
            paths = extract_paths_from_svg(svg_path)

            # Generate the React component
            component_code = generate_icon_component(icon_name, paths)

            # Save the component to a file
            output_file = os.path.join(OUTPUT_DIR, f"{icon_name}.tsx")
            with open(output_file, "w") as f:
                f.write(component_code)

            print(f"Generated: {output_file}")

if __name__ == "__main__":
    main()